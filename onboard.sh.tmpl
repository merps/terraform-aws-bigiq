#!/bin/bash
LOG_FILE=${onboard_log}
if [ ! -e $LOG_FILE ]
then
     touch $LOG_FILE
     exec &>>$LOG_FILE
else
    exit
fi
exec 1>$LOG_FILE 2>&1
startTime=$(date +%s)
function check_internet_connection {
    checks=0
    github_response="bad"
    while [ $checks -lt 120 ] ; do
        github_response=`curl -s https://www.githubstatus.com/api/v2/status.json | jq .status.description --raw-output`
        if [ "$github_response" == "All Systems Operational" ]; then
            log "GitHub is ready"
            break
        fi
        log "GitHub not ready: $checks"
        let checks=checks+1
        sleep 5
    done
    if [ "$github_response" == "bad" ]; then
        log "No GitHub internet connection."
        exit
    fi
}
function waitMcpd () {
checks=0
while [[ "$checks" -lt 120 ]]; do
    echo "checking mcpd"
    tmsh -a show sys mcp-state field-fmt | grep -q running
   if [ $? == 0 ]; then
       echo "mcpd ready"
       break
   fi
   echo "mcpd not ready yet"
   let checks=checks+1
   sleep 10
done
}
waitMcpd
admin_username='${admin_name}'
admin_password='${admin_password}'
tmsh create auth user $admin_username password $admin_password shell bash partition-access add { all-partitions { role admin } };
tmsh modify auth user $admin_username shell bash partition-access add { all-partitions { role admin } };
tmsh list auth user $admin_username
echo "root:"$admin_password"" | chpasswd
echo "admin:"$admin_password"" | chpasswd
tmsh save sys config
CREDS="$admin_username:$admin_password"
mkdir -p /home/$admin_username/.ssh/
cp /home/admin/.ssh/authorized_keys /home/$admin_username/.ssh/authorized_keys
onboard_log="${onboard_log}"
bigIqLicenseKey="${licensekey}"
hostName="${hostname}"
ntpServers="${ntp_servers}"
ntpTimeZone="${timezone}"
masterKey='${masterkey}'
dnsSearchDomains="${dns_search_domains}"
dnsServers="${dns_servers}"
CURL="/usr/bin/curl"
cloud="aws"
mgmt_port=`tmsh list sys httpd ssl-port | grep ssl-port | sed 's/ssl-port //;s/ //g'`
systemInfoUrl="/info/system"
authUrl="/mgmt/shared/authn/login"
launchStatusUrl="/mgmt/setup/launch/status"
licenseUrl="/mgmt/setup/license/activate"
eulaUrl="/mgmt/setup/license/accept-eula"
licenseRegistrationUrl="/mgmt/setup/license"
personalityUrl="/mgmt/setup/personality"
base_url="https://raw.githubusercontent.com/F5Networks"
base_dir="/config/cloud"
localHost="https://localhost:"
hostNameUrl="/mgmt/setup/address"
masterKeyUrl="/mgmt/setup/masterkey"
vlanUrl="/mgmt/setup/address/vlan"
selfipUrl="/mgmt/setup/address/self-ip"
dnsUrl="/mgmt/setup/dns"
ntpUrl="/mgmt/setup/ntp"
systemSetupUrl="/mgmt/setup/launch"
discoveryUrl="/mgmt/setup/address"
passwordRootUrl="/mgmt/setup/password"
passwordAdminUrl="/mgmt/setup/password"
passwordChangedUrl="/mgmt/setup/password"
function log() {
    echo "$(date '+%Y-%m-%dT%H:%M:%SZ'): $1"
}
function safe_download {
    checks=0
    while [ $checks -lt 120 ] ; do
        $CURL -s --fail --retry 20 --retry-delay 5 --retry-max-time 240 -o $1 $2 && break
        let checks=checks+1
        sleep 5
    done
}
getToken () {
    token=$(curl -sk --header "Content-Type:application/json" --data "$credsPayload" --url $localHost$mgmt_port$authUrl | jq -r .token.token)
    echo "$token"
}
setToken () {
    #--header "X-Vault-Token: $VAULT_TOKEN"
    token=$(getToken)
    tokenHeader="X-F5-Auth-Token: $token"
    echo "$tokenHeader"
}
function waitIq () {
  count=0
  while [ $count -le 10 ]
  do
    status=$( curl -sk --header "$(setToken)" https://localhost:$mgmt_port$systemInfoUrl | jq .)
    statusType=$(echo $status | jq -r type)
    if [ "$statusType" == "object" ]; then
      state=$( echo $status | jq -r .available)
      if [ "$state" == "true" ]; then
        echo "ready"
        break
      else
        count=$[$count+1]
        sleep 30
      fi
    else
      count=$[$count+1]
      sleep 30
    fi
    if [ $count == 10 ]; then
      echo "failed: $state"
    fi
  done
}
getDossier () {
 dossier=$(get_dossier -b $1)
 echo "$dossier"
}
licenseActivate () {
    curl -sk --header "Content-Type:application/json" --header "$(setToken)" --data "$1" --url $localHost$mgmt_port$licenseUrl
}
licenseRegistration () {
        curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$1" --url $localHost$mgmt_port$licenseRegistrationUrl
}
checkLicense () {
    status=$(curl -sk --header "$(setToken)" --url $localHost$mgmt_port$licenseUrl | jq -r .status )
    case $status in
    LICENSING_ACTIVATION_IN_PROGRESS)
        echo "inprogress"
        ;;
    LICENSING_COMPLETE)
        echo "complete"
        ;;
    LICENSING_FAILED)
        echo "failed"
        ;;
    NEED_EULA_ACCEPT)
        echo "eula"
        ;;
    *)
        debug=$(curl -sk -u $CREDS $localHost$mgmt_port$licenseUrl | jq . )
        echo "Other error: $debug"
        ;;
    esac

}
getEulaPayload () {
eulaPayload=$(cat -<<EOF
  {
  "baseRegKey": "${licensekey}",
  "dossier: "$(getDossier ${licensekey})",
  "eulaText": $(curl -sk --header "$(setToken)" --url $localHost$mgmt_port$licenseUrl | jq .eulaText)
  }
EOF
)
}
getLicenseFilePayload () {
licenseFilePayload=$(cat -<<EOF
{
   "licenseText": $(curl -sk --header "$(setToken)" --url $localHost$mgmt_port$licenseUrl | jq .licenseText)
}
EOF
)
}
setHostName () {
  curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$hostNamePayload" --url $localHost$mgmt_port$hostNameUrl
}
setMasterKey () {
  curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$masterKeyPayload" --url $localHost$mgmt_port$masterKeyUrl
}
createDiscoveryVlan () {
 curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$vlanPayload" --url $localHost$mgmt_port$vlanUrl
}
createDiscoverySelfIp () {
 curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$selfIpPayload" --url $localHost$mgmt_port$selfIpUrl
}
setDiscoveryAddress () {
 curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$discoveryPayload" --url $localHost$mgmt_port$discoveryUrl
}
setDns () {
 curl -sk  --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$dnsPayload" --url $localHost$mgmt_port$dnsUrl
}
setNtp () {
 curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$ntpPayload" --url $localHost$mgmt_port$ntpUrl
}
submitSetup () {
 curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$systemSetupPayload" --url $localHost$mgmt_port$systemSetupUrl
}
setPasswords () {
 curl -sk --header "Content-Type:application/json" --header "$(setToken)" -X POST --data "$passwordPayload7" --url $localHost$mgmt_port$passwordRootUrl7
}
function RestCall () {
  count=0
  while [ $count -le 4 ]
  do
    status=$( curl -sk -u $CREDS https://localhost:$mgmt_port/info/system | jq .)
    case $status in
        FINISHED)
            echo " rpm: $filename task: $install status: $status"
            break
            ;;
        STARTED)
            echo " rpm: $filename task: $install status: $status"
            ;;
        RUNNING)
            echo " rpm: $filename task: $install status: $status"
            ;;
        FAILED)
            error=$(restcurl -u $CREDS $rpmInstallUrl/$install | jq .errorMessage)
            echo "failed $filename task: $install error: $error"
            break
            ;;
        *)
            debug=$(restcurl -u $CREDS $rpmInstallUrl/$install | jq . )
            echo "failed $filename task: $install error: $debug"
            ;;
        esac
    sleep 2
    done
}
passwordPayload=$(cat -<<EOF
{
    "admin":"$admin_password",
    "root":"$admin_password"
}
EOF
)
ntpPayload=$(cat -<<EOF
{
    "servers": ["$ntpServers"],
    "timezone": "$ntpTimeZone"
}
EOF
)
dnsPayload=$(cat -<<EOF
{
    "servers": ["$dnsServers"],
    "search": ["$dnsSearchDomains"]
}
EOF
)
systemSetupPayload=$(cat -<<EOF
{
    "isSystemSetup": true
}
EOF
)
vlanPayload=$(cat -<<EOF
{
    "name": "discovery",
    "interfaces": [
        {
            "name": "1.1",
            "untagged": true
        }
    ],
    "tag": 100,
    "mtu": 1600
}
EOF
)
discoveryPayload=$(cat -<<EOF
{
    "discoveryAddress": "${discovery_ip}"
}
EOF
)
selfIpPayload=$(cat -<<EOF
{
    "name": "self_discovery",
    "address": "${discovery_ip}",
    "vlan": "/Common/discovery"
}
EOF
)
masterKeyPayload=$(cat -<<EOF
{
    "passphrase": "$masterKey"
}
EOF
)
hostNamePayload=$(cat -<<EOF
{
    "hostname": "$hostName"
}
EOF
)
credsPayload=$(cat -<<EOF
{
    "username": "$admin_username",
    "password": "$admin_password"
}
EOF
)
if [ "$bigIqLicenseKey" == "" ]; then
licensePayload=$(cat -<<EOF
  {
      "licenseText": "skipLicense:true"
  }
EOF
)
else
licensePayload=$(cat -<<EOF
  {
      "baseRegKey": "${licensekey}",
      "addOnKeys": [],
      "activationMethod": "AUTOMATIC"
  }
EOF
)
fi
personality=$(cat -<<EOF
{
  "systemPersonality": "$personality"
}
EOF
)
waitMcpd
check_internet_connection
if [[ "$(waitIq)" == "ready" ]]; then
    echo "ready"
else
    echo "failed IQ status not ready"
    exit
fi
if [ "$bigIqLicenseKey" == "" ]; then
    echo "bigiq-license manager"
    licenseRegistration "$licensePayload"
else
    echo "bigiq-cm"
    licenseActivate "$licensePayload"
    # check license install state
    while [[ $count -le 4 ]]
    do
        if [[ "$(checkLicense)" == "eula" ]]; then
            eula=$(curl -sk --header "$(setToken)" --url $localHost$mgmt_port$licenseUrl | jq -r .eulaText)
            licenseActivate "$(getEulaPayload)"
            echo "send eula"
        fi
        if [[ "$(checkLicense)" == "failed" ]]; then
            if [ "$bigIqLicenseKey" == "" ]; then
                licenseRegistration "$licensePayload"
            else
                echo "check license key"
            fi
        fi
        if [[ "$(checkLicense)" == "complete" ]]; then
            licenseData=$(curl -sk --header "$(setToken)" --url $localHost$mgmt_port$licenseUrl | jq .licenseText)
            # license
            licensePayload="{\"licenseText\": $licenseData}"
            # install license
            echo "install license"
            licenseRegistration "$(getLicenseFilePayload)"
            fi
        sleep 2
        count=$[$count+1]
    done
fi
waitMcpd
setHostName
setMasterKey
setPasswords
# createDiscoveryVlan
# createDiscoverySelfIp
# setDiscoveryAddress
setDns
setNtp
submitSetup
waitMcpd
waitIq
tmsh save sys config
exit